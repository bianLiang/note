AMD (RequireJS代表)  异步模块定义，它是 依赖前置 (因为依赖必须一开始就写好)会先 尽早地执行(依赖)模块 ，
 		     相当于所有的require都被提前了，它的 require 分全局和局部， 一个API当多个用 。
例：　require([module], callback);   module：需要加载的模块。  callback：回调；

CMD (SeaJS代表)   一个模块就是一个文件；它推崇 依赖就近 想什么时候 require 就什么时候加载，实现了 懒加载，
                  延迟执行 ；没有全局 require， 每个API都简单纯粹 。




CommonJS规范  例： var math = require('math'); 　math.add(2,3);





【angular url参数传递 以及获取】


传递：public router: Router
const urlObj = {
      queryParams: {'key': key }
    };
that.router.navigate(['/template-preview'], urlObj);


获取：import { ActivatedRoute, Router } from '@angular/router'; 
      private routeInfo: ActivatedRoute,

this.routeInfo.queryParams.subscribe(params => {
      console.log(params );
    });

或this.routeInfo.snapshot.queryParams['key']
【文件上传预览功能】

const reader = new FileReader();
    // reader.readAsDataURL(e.files[0]);
    reader.readAsText(e.files[0]);
    console.log(reader.result);
    reader.onload = function() {
      console.log(this.result);
    };

【转style行内样式innerHTML】
 import { DomSanitizer } from '@angular/platform-browser';
 private sanitizer: DomSanitizer
 that.sanitizer.bypassSecurityTrustHtml(html结构string);


【contenteditable设置placeholder的输入提示语】
.con:empty:before{ 
    content: '说点啥好呢？'; 
    color: gray; 
} 
.con:focus:before{
    content:none;
}
【contenteditable去掉边框】
style="outline: none;"


【系统选择事件，点击选择，再点击取消】
 selectText(containerid, type) {
    if (type === 'txt') {
      if (window.getSelection().toString().length > 0) {
        this.selection = false;
        return false;
      } else {
        if (window.getSelection) {
          const selection = window.getSelection();
          const range = document.createRange();
          range.selectNodeContents(containerid);
          selection.removeAllRanges();
          selection.addRange(range);
          this.selection = true;
        }
      }
    } else {
      window.getSelection().removeAllRanges();
    }
  }


【css英文连续英文字母换行】
 word-break:break-all;

【去除input默认样式】
style="outline:none;border-style:none"

【更改滚动条样式】
#style-2::-webkit-scrollbar-track {
     background-color: #F5F5F5;
     -webkit-box-shadow: inset 0 0 6px rgba(0, 0, 0, 0.22);
}
/*定义滚动条高宽及背景*/
#style-2::-webkit-scrollbar{
 width: 10px;
 background-color: rgba(0, 0, 0, 0.34);
}
/*定义滚动条*/
#style-2::-webkit-scrollbar-thumb{
 background-color: #8b8b8b;
 border-radius: 10px;
}


【angular4更改html样式】
@ViewChild('box') _box: ElementRef;
private renderer: Renderer,
this.renderer.setElementStyle(this._box.nativeElement, 'height', '100px');

【angular4将字符串转成innerHTML能用的类型】
    import { DomSanitizer } from '@angular/platform-browser';
    private sanitizer: DomSanitizer,
    his.sanitizer.bypassSecurityTrustHtml(string);

【使用[(ngModel)]需要引入的模块】
import {FormsModule} from '@angular/forms';
【解决使用[(ngModel)]报错】
在input标签中使用[ngModelOptions]="{standalone: true}"

【判断鼠标在不在某div内部】
 const div = document.getElementById('textarea');
  const x = event.clientX;
  const y = event.clientY;
  const divx1 = div.offsetLeft;
  const divy1 = div.offsetTop;
  const divx2 = div.offsetLeft + div.offsetWidth;
  const divy2 = div.offsetTop + div.offsetHeight;
  if ( x < divx1 || x > divx2 || y < divy1 || y > divy2){
    console.log('不再内部');
  }

【angular自定义html结构绑定数据方式】
 const html = `<span>${data.text}</span>`;

【判断map对象是否为空】
if (JSON.stringify(that.nodeDataMap) === JSON.stringify({})) {}

【拆分字符串，前一部分后一部分】
const values = this.value['web_url'].split('://');
    console.log(values[0]);
    console.log(values[1]);

【匹配第一次出现特殊字符里的内容】
const result = string.match(/-(.*?)-/)
console.log(result[1])

【angular整个组件绑定按键事件】
import { HostListener } from '@angular/core';
 @HostListener('document:keyup', ['$event'])
  deleteSelecte(event: KeyboardEvent) {
    console.log(event.keyCode);
  }
【angular路由问题】
在子路由下进行浏览器回退事件，回退到父路由中，父路由不再执行ngOnInit()

【禁止点击div】
style="pointer-events: none;"

【一行居中，多行居左】
div{
    padding: 2rem;
    text-align: center;
}
div p {
    width : auto; 
    display : inline-block;
    text-align : left;
}

【获取url路径】
location.pathname

【单行超出部分省略号显示】
overflow: hidden;
text-overflow:ellipsis;
white-space: nowrap;

【多行超出的部分省略号显示】
display: -webkit-box;
-webkit-box-orient: vertical;
-webkit-line-clamp: 3;
overflow: hidden;

【echart异步回调取回数据重新绘制图表】
Chart.setOption(that.option, true);

【获取前几天或者几个月的所有日期】
getDay() {
    const lastMonth = [];
    for (let i = 0; i < 90; i++) {
      lastMonth.unshift(new Date(new Date()
      .setDate(new Date().getDate() - i))
      .toLocaleString().substring(0, 9));
    }
    return lastMonth;
  }

【中国标准时间格式化】
var d = new Date('Thu May 12 2016 08:00:00 GMT+0800 (中国标准时间)');  

youWant=d.getFullYear() + '-' + (d.getMonth() + 1) + '-' + d.getDate() + ' ' + d.getHours() + ':' + d.getMinutes() + ':' + d.getSeconds();

【去掉按钮选中边框】
.timeInterval:focus{
  outline: none;
} 

【计算两个日期之间的天数 时间格式是xxxx-xx-xx】
DateDiff(sDate1,  sDate2) {
    let  aDate,  oDate1,  oDate2, iDays;
    aDate  =  sDate1.split('-');
    oDate1  =  new  Date(aDate[1]  +  '-'  +  aDate[2]  +  '-'  +  aDate[0]);
    aDate  =  sDate2.split('-');
    oDate2  =  new  Date(aDate[1]  +  '-'  +  aDate[2]  +  '-'  +  aDate[0]);
    iDays  =  Math.abs(oDate1 - oDate2) / 1000 / 60 / 60 / 24;
    return  iDays;
  }

【echarts随屏幕自适应】
window.onresize = that.Chart.resize;

【导出csv表格数据】
 exportCsv(obj) {
    const title = obj.title;
    const titleForKey = obj.titleForKey;
    const data = obj.data;
    const str = [];
    str.push(obj.title.join(',') + '\n');
    for (let i = 0; i < data.length; i++) {
      const temp = [];
      for (let j = 0; j < titleForKey.length; j++) {
        temp.push(data[i][titleForKey[j]]);
      }
      str.push(temp.join(',') + '\n');
    }
    const uri =
      'data:text/csv;charset=utf-8,' + encodeURIComponent(str.join(''));
    const downloadLink = document.createElement('a');
    downloadLink.href = uri;
    downloadLink.download = 'export.csv';
    document.body.appendChild(downloadLink);
    downloadLink.click();
    document.body.removeChild(downloadLink);
  }

 onClick() {
    this.exportCsv({
      title: ['第一列', '第二列'],
      titleForKey: ['num1', 'num2'],
      data: [
        {
          num1: '123',
          num2: 'fff'
        },
        {
          num1: '123',
          num2: 'fff'
        },
        {
          num1: '123',
          num2: 'fff'
        }
      ]
    });
  }

【修改滚动条样式】
.box::-webkit-scrollbar-track {
 background-color: #F5F5F5;
 /* -webkit-box-shadow: inset 0 0 6px rgba(0, 0, 0, 0.22); */
}
/*定义滚动条高宽及背景*/
.box::-webkit-scrollbar{
 width: 2px;
 background-color: rgba(0, 0, 0, 0.34);
}
/*定义滚动条*/
.box::-webkit-scrollbar-thumb{
 background-color: #8b8b8b;
 border-radius: 10px;

}

【获取系统时间 xxxx-xx-xx xx:xx:xx】
 getTime () {
    const d = new Date();
    const year = d.getFullYear();
    const mouth = d.getMonth() + 1;
    const day = d.getDate();
    const hour = d.getHours() < 10 ? '0' + d.getHours() : d.getHours();
    const minutes = d.getMinutes() < 10 ? '0' + d.getMinutes() : d.getMinutes();
    const second = d.getSeconds() < 10 ? '0' + d.getSeconds() : d.getSeconds();
    const curTime = year + '-' + mouth + '-' + day + ' ' + hour + ':' + minutes + ':' + second;
    return curTime;
  }

【随机抽取数组中不重复项】
getArrayItems(arr, num) {
    //新建一个数组,将传入的数组复制过来,用于运算,而不要直接操作传入的数组;
    var temp_array = new Array();
    for (var index in arr) {
        temp_array.push(arr[index]);
    }
    //取出的数值项,保存在此数组
    var return_array = new Array();
    for (var i = 0; i<num; i++) {
        //判断如果数组还有可以取出的元素,以防下标越界
        if (temp_array.length>0) {
            //在数组中产生一个随机索引
            var arrIndex = Math.floor(Math.random()*temp_array.length);
            //将此随机索引的对应的数组元素值复制出来
            return_array[i] = temp_array[arrIndex];
            //然后删掉此索引的数组元素,这时候temp_array变为新的数组
            temp_array.splice(arrIndex, 1);
        } else {
            //数组中数据项取完后,退出循环,比如数组本来只有10项,但要求取出20项.
            break;
        }
    }
    return return_array;
}

【获取最近24小时】
for (let i = 0; i < 24 * that.numberDays; i++) {
          const h = new Date(new Date().getTime() - i * 60 * 60 * 1000).getHours();
          const m = new Date(new Date().getTime() - i * 60 * 60 * 1000).getMinutes();
          const s = new Date(new Date().getTime() - i * 60 * 60 * 1000).getSeconds();
          dataList.unshift(h + ':' + m + ':' + s);
        }

【获取最近多少天】
for (let i = 0; i < that.numberDays; i++) {
          dataList.unshift(new Date(new Date()
          .setDate(new Date().getDate() - i))
          .toLocaleString().substring(0, 9));
        }

【获取最近几个月】
for (let i = 0; i < that.numberMonth; i++) {
          dataList.unshift(new Date(new Date()
          .setMonth(new Date().getMonth() - i))
          .toLocaleString().substring(0, 9));
        }
【input的type设置为number的时候，maxlength无效】
<input type="number" oninput="if(value.length>11)value=value.slice(0,11)"/>

【父组件调用子组件的方法和属性】
<xma-time-selection #timeSC ></xma-time-selection>
@ViewChild('timeSC', {read: TimeSelectionComponent}) timeSC: TimeSelectionComponent;

【数组时间排序】
  timeSorting(obj) {
    for (let i = 0; i < obj.length; i++) {
      obj[i].createdTime = obj[i].createdTime.substring(0, 16);
    }
    return obj;
  }

【绑定行内样式需要的方法】
import { DomSanitizer } from '@angular/platform-browser';
private sanitizer: DomSanitizer,
trustHtml(string) {
    return this.sanitizer.bypassSecurityTrustHtml(string);
  }
【获取鼠标选中的文字】
window.getSelection().toString()

【富文本编辑，添加超链接】
const linkURL = prompt('请选中页面内容填写链接地址:', 'http://');
const sText = document.getSelection();
document.execCommand('createLink', true, linkURL);
sText.anchorNode.parentElement.title = linkURL;
sText.anchorNode.parentElement.target = '_blank';

【匹配a标签有没有_bank】
const re = /target="_*[a-z]*"/g;
const rp = /<a/g;
html = 【这里是要匹配的字段】.replace(re, `target="_bank"`);

if (html.match(re)) {
   html = html.replace(rp,  `<a target="_bank"`);
} else {
   // html = html.replace(re,  `<a target="_bank"`);
  }

【ES6字符串拼接】
var name = `Your name is ${first} ${last}.`

【ES7判断数组中是否含有某个值】
let arr = ['react', 'angular', 'vue'];

if (arr.includes('react'))
{
    console.log('react存在');
}
【ES8 async/await解决异步调用】
login(userName) {
   
 return new Promise((resolve, reject) => {
      
  setTimeout(() => {
           
  resolve('1001');
      
    }, 600);
});

}



*ES7解决方法
doLogin(userName) {
   
 this.login(userName)

        .then(this.getData)
       
        .then(result => {
        
            console.log(result)
      
          })

}


*ES8解决方法
async doLogin2(userName) {
    const userId=await this.login(userName);
    const result=await this.getData(userId);
}

【ES8获取对象里的所有值 const obj = {a: 1, b: 2, c: 3};】
const values=Object.values(obj1);
console.log(values);//[1, 2, 3]

【文字被复制、剪切提醒】
 <p oncopy="alert('文字已被复制到剪贴板！')">这是一些文字</p>
<input type="text" value="文字内容" oncut="alert('文字已被剪切！')" />

【禁止向文本域粘贴内容】
<input type="text" onpaste="return false;" />

【angular运行不同端口命令】
ng serve --port 4000
【angular运行不同的环境】
ng serve --configuration=test